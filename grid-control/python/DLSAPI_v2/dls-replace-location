#!/usr/bin/env python

#
# $Id: dls-replace-location,v 1.2 2006/05/24 09:11:59 delgadop Exp $
#
# DLS Client. $Name: DLS_0_1_1 $
# Alessandra Fanfani Univ./INFN Bologna. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
DLS_VERB_HIGH = dlsApi.DLS_VERB_HIGH
DLS_VERB_WARN = dlsApi.DLS_VERB_WARN
from dlsDataObjects import DlsLocation, DlsFileBlock, DlsEntry
import dlsClient
import os
import sys
import commands
import getopt



######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-replace-location [-v, -e, -i] -o <old_loc> -n <new_loc>"
   print "       dls-replace-location -u"
   print "       dls-replace-location -h"

def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -o, --oldlocation <oldlocation>
   -n, --newlocation <newlocation>
   """
def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """Replaces the location for all fileblocks for the given <oldlocation> to
the given <newlocation> in the DLS server.

The "-e" option can be used to set the DLS endpoint to use. If not specified,
the endpoint is retrieved from:
    - DLS_ENDPOINT environmental variable
If the DLS endpoint cannot be retrieved in any of these ways, the command fails.
The endpoint should be of the form: "hname[:port][/path/to/DLS]", where a
default port is used if not specified, and the path to DLS may be required for
some DLS implementations (and ignored otherwise).

The "-i" option specifies the type of interface that should be used (which
depends on the DLS backend to access). If not specified, the interface type
is retrieved from:
    - DLS_TYPE environmental variable
If the interface type cannot be retrieved in any of these ways, the command fails.
Currently accepted values are:
    - DLS_TYPE_LFC  =>  DlsLfcApi class (complete API with LFC back-end)
    - DLS_TYPE_DLI  =>  DlsDliClient class (getLocations only API with LFC back-end)
    - DLS_TYPE_MYSQL =>  DlsMySQLApi  class (complete API with MySQL proto back-end) 

The "-v" option sets the verbosity level for the command. Accepted values are:
  -v 0 ==> print nothing else than error messages
  -v 1 ==> print also warning messages (default)
  -v 2 ==> print extra debug information

If "-u" is specified, usage information is displayed.

If "-h" is specified, help information is displayed.
   """
   options()
   usage()


###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 

   longoptions=["help", "usage", "verbose", "endpoint", "interface-type","oldlocation","newlocation"]
   try:
      optlist, args = getopt.getopt(pArgs, 'huv:e:i:o:n:', longoptions)
   except getopt.GetoptError, inst:
      sys.stderr.write("Bad usage: "+str(inst)+'\n')
      usage()
      sys.exit(-1)

   err=0
   admitted_verb_values = [0, 1, 2]
   verbose = 1
   endpoint = None
   iface_type = None
   admitted_iface_types = ["DLS_TYPE_LFC", "DLS_TYPE_DLI", "DLS_TYPE_MYSQL"]
   oldlocation = None
   newlocation = None

   for opt, val in optlist:
     if opt in ("-h", "--help"):
         help()
         return -1

     elif opt in ("-u", "--usage"):
         usage()
         return -1
         
     elif opt in ("-v", "--verbose"):
         try: 
           val = int(val)
         except ValueError, inst:
           sys.stderr.write("Unsupported verbosity value: " + val + "\n")
           return -1
         if (not (val in admitted_verb_values)):
            sys.stderr.write("Unsupported verbosity value: " + val + "\n")
            return -1             
         verbose = val
         
     elif opt in ("-e","--endpoint"):
         endpoint = val

     elif opt in ("-i", "--interface-type"):
         if (not (val in admitted_iface_types)):
            sys.stderr.write("Unsupported interface type: " + val + "\nSuppported values: %s\n"%admitted_iface_types)
            return -1
         if(val == "DLS_TYPE_LFC"):
            iface_type = dlsClient.DLS_TYPE_LFC
         if(val == "DLS_TYPE_DLI"):
            iface_type = dlsClient.DLS_TYPE_DLI
         if(val == "DLS_TYPE_MYSQL"):
            iface_type = dlsClient.DLS_TYPE_MYSQL

     elif opt in ("-o", "--oldlocation"):
         oldlocation=val
     elif opt in ("-n", "--newlocation"):
         newlocation=val


#   if endpoint==None:
#      usage()
#      msg = "Error: --endpoint <DLS endpoint> is required"
#      sys.stderr.write(msg+"\n")
#      sys.exit(-1)
#   if iface_type==None:
#      usage()
#      msg = "Error: --interface-type <DLS type> is required. Suppported values: %s\n"%admitted_iface_types
#      sys.stderr.write(msg+"\n")
#      sys.exit(-1)
   if oldlocation==None:
      msg = "Error: --oldlocation <oldlocation> is required"
      sys.stderr.write(msg+"\n")
      usage()
      sys.exit(-1)
   if newlocation==None:
      msg = "Error: --newlocation <newlocation> is required"
      sys.stderr.write(msg+"\n")
      usage()
      sys.exit(-1)

 
  
 # Build the arguments 

   
   #if(len(args)<1):
   #      print "Bad usage: Not enough input arguments"
   #      usage()
   #      return -1
   #if(len(args)>1):
   #      print "Bad usage: Too many input arguments"
   #      usage()
   #      return -1



 # Create the interface binding
   try:
      iface = dlsClient.getDlsApi(iface_type, endpoint)
      if(verbose == 2):
         iface.setVerbosity(dlsApi.DLS_VERB_HIGH)
      else:
         if(verbose == 0):
            iface.setVerbosity(dlsApi.DLS_VERB_NONE)
         else:
            if(verbose == 1):
               iface.setVerbosity(dlsApi.DLS_VERB_WARN)
   except dlsApi.DlsApiError, inst:
      msg = "Error when binding the DLS interface: " + str(inst)
      sys.stderr.write(msg+"\n")
      return -1
 
   # Start session
   iface.startSession()
    
   if(verbose >= 2):
      print "*** Get FileBlocks given the location=%s"%oldlocation
   entryList=[]
   try:
      entryList=iface.getFileBlocks(oldlocation)
   except dlsApi.DlsApiError, inst:
      msg = "Error in the DLS query: %s." % str(inst)
      sys.stderr.write(msg+"\n")
      iface.endSession()
      sys.exit(-1)  

   if(verbose >= 2):
      print "*** Delete all DLS entries with location=%s"%oldlocation
      print "*** Add all DLS entries with location=%s"%newlocation
   #print entryList
   for entry in entryList:
       #print entry
       try:
         #print " delete %s"%entry
         iface.delete([entry])
         newentry=DlsEntry(entry.fileBlock,[DlsLocation(newlocation)])
         #print " add %s"%newentry
         iface.add([newentry])
       except dlsApi.DlsApiError, inst:
         msg = "Error in deleting DLS entry: %s." % str(inst)
         sys.stderr.write(msg+"\n")
         pass

   # end session
   iface.endSession()


######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
