#!/usr/bin/env python

#
# $Id: dls-update,v 1.5 2006/04/25 10:43:41 afanfani Exp $
#
# DLS Client. $Name: DLS_0_1_1 $.
# Antonio Delgado Peris. CIEMAT. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
DLS_VERB_HIGH = dlsApi.DLS_VERB_HIGH
DLS_VERB_WARN = dlsApi.DLS_VERB_WARN
from dlsDataObjects import DlsLocation, DlsFileBlock, DlsEntry
import dlsClient
import os
import sys
import commands
import getopt



######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-update [-v, -t, -e, -i] <fileblock> [attr=val ..] [<SE> [attr=val ..] ..]"
   print "       dls-update [-v, -t, -e, -i] -f <listing_file>"
   print "       dls-update -u"
   print "       dls-update -h"

def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -t, --transaction
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -f, --from-file <filename>
   """
def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """Updates the attributes of a FileBlock (or one its associated locations,
if the corresponding SE is specified) in the DLS server. Attibutes must be specified
in a key=val format, and only known attributes will be considered.

Understood FileBlock attributes are:    
 filesize, csumtype, csumvalue

Understood location attributes are:    
 ptime, atime

If atime=xxx is specified, the value for the attribute will not be taken into account,
but the access time of the location will be updated to present time.
 
The "-f" option can be used to retrieve FileBlock names from a file rather than from the
given arguments. The file must contain one line per FileBlock to be added, with the
optional SE and attributes in the same line and separated by whitespaces.

The "-t" option indicates if transactions should be used. In that case, any error in an
operation provokes a stop (no more removals) and a rollback of the previous operations.
Otherwise (no transactions), after a failure in one location, the tool tries to go on with
next locations (and FileBlocks).

NOTE: It is not recommended to maintain a transaction for too long (~10 seconds).
Thus, it is suggested not to include too many FileBlock in a <listfile> if transactions
are to be used. For a larger number of FileBlocks, please split them into several
invocations of the command.

The "-e" option can be used to set the DLS endpoint to use. If not specified,
the endpoint is retrieved from:
    - DLS_ENDPOINT environmental variable
If the DLS endpoint cannot be retrieved in any of these ways, the command fails.
The endpoint should be of the form: "hname[:port][/path/to/DLS]", where a
default port is used if not specified, and the path to DLS may be required for
some DLS implementations (and ignored otherwise).

The "-i" option specifies the type of interface that should be used (which
depends on the DLS backend to access). If not specified, the interface type
is retrieved from:
    - DLS_TYPE environmental variable
If the interface type cannot be retrieved in any of these ways, the command fails.
Currently accepted values are:
    - DLS_TYPE_LFC  =>  DlsLfcApi class (complete API with LFC back-end)
    - DLS_TYPE_DLI  =>  DlsDliClient class (getLocations only API with LFC back-end)
    - DLS_TYPE_MYSQL =>  DlsMySQLApi  class (complete API with MySQL proto back-end) 

The "-v" option sets the verbosity level for the command. Accepted values are:
  -v 0 ==> print nothing else than error messages
  -v 1 ==> print also warning messages (default)
  -v 2 ==> print extra debug information

If "-u" is specified, usage information is displayed.

If "-h" is specified, help information is displayed.
   """
   options()
   usage()



def updateEntries(iface, lineList, trans, verbose):
   """
    Tries to update the attributes of the specified FileBlocks and locations for
    each of the lines  in lineList. These lines are strings containing information
    regarding the FileBlock name (LFN), its attributes, and possibly several SEs
    where a location is located and the attributes for them. 

    The format of a line is then:
    <lfn> [attr_lfn_1=val ..] [<se1> [attr_se1_1=val ..] ..]

    All elements separated by whitespaces, and attributes identified by the presence
    of the '=' character.

    Throws DlsLfcApiError if there is a problem in the DLS operation, unless
    trans is set to True.
   """

   entryList = []

   for line in lineList:

      # Split
      line = (line.strip()).split()
      if(not line):
         continue

      # First is LFN
      lfn = line.pop(0)
      entry = DlsEntry(DlsFileBlock(lfn)) 

      # Then the LFN's attributes (key=val)
      attrDict = {}
      while(line):
         token=line[0]
         pos = token.find('=')
         if( pos == -1):
            break
         else:
            line.pop(0)
            attrDict[token[:pos]] = token[(pos+1):]            
      entry.fileBlock.attribs = attrDict

      # Then the SEs
      attrDict = {}      
      se = ''
      for token in line:
         pos = token.find('=')
         if( pos == -1):
            if(se):
               loc = DlsLocation(se)
               loc.attribs = attrDict
               entry.locations.append(loc)
            se = token
            attrDict = {}
         else:
            attrDict[token[:pos]] = token[(pos+1):]
            
      # And the last one (that is left...)
      if(se):
         entry.locations.append(DlsLocation(se, attrDict))

      # Store all the entries
      entryList.append(entry)

   if(verbose >= 2):
      print "--DlsApi.update(",
      for i in entryList: print i, ";",
      print ")"

   # Finally, do the update (and let the caller deal with the exception...)
   iface.update(entryList,  trans = trans, session = not trans)

            

###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 
 
   longoptions=["help", "usage", "transaction", "endpoint", "interface-type", "verbose","from-file"]
   try:
      optlist, args = getopt.getopt(pArgs, 'hute:v:f:', longoptions)
   except getopt.GetoptError, inst:
      sys.stderr.write("Bad usage: "+str(inst)+'\n')
      usage()
      sys.exit(-1)

   err=0
   trans = False
   admitted_verb_values = [0, 1, 2]
   verbose = 1
   endpoint = None
   iface_type = None
   admitted_iface_types = ["DLS_TYPE_LFC", "DLS_TYPE_DLI", "DLS_TYPE_MYSQL"]
   fromFile = False
   fname=""
   for opt, val in optlist:
       if opt in ("-h", "--help"):
           help()
           return -1

       elif opt in ("-u", "--usage"):
           usage()
           return -1
           
       elif opt in ("-t", "--transaction"):
           trans = True

       elif opt in ("-e","--endpoint"):
           endpoint = val

       elif opt in ("-i", "--interface-type"):
           if (not (val in admitted_iface_types)):
              sys.stderr.write("Unsupported interface type: " + val + "\nSuppported values: %s\n"%admitted_iface_types)
              return -1
           if(val == "DLS_TYPE_LFC"):
              iface_type = dlsClient.DLS_TYPE_LFC
           if(val == "DLS_TYPE_DLI"):
              iface_type = dlsClient.DLS_TYPE_DLI
           if(val == "DLS_TYPE_MYSQL"):
              iface_type = dlsClient.DLS_TYPE_MYSQL

       elif opt in ("-v", "--verbose"):
           try: 
             val = int(val)
           except ValueError, inst:
             sys.stderr.write("Unsupported verbosity value: " + val + "\n")
             return -1
           if (not (val in admitted_verb_values)):
              sys.stderr.write("Unsupported verbosity value: " + val + "\n")
              return -1             
           verbose = val

       elif opt in ("-f","--from-file"):
           fromFile = True
           fname = val

  
 # Build the arguments 

   # From file
   if(fromFile):
      try:
         file=open(fname, 'r')
      except IOError, inst:
         msg="The file "+fname+" could not be opened: "+str(inst)+"\n"
         sys.stderr.write(msg)
         return -1
      lineList=file.readlines()
      
   # From command line options
   else:
      if(len(args)<1):
         sys.stderr.write("Not enough input arguments\n")
         usage()
         return(-1)
         
      line=""
      for token in args:
         line += token +" "
      lineList = [line]


 # Create the interface binding
   try:
      iface = dlsClient.getDlsApi(iface_type, endpoint)
      if(verbose == 2):
         iface.setVerbosity(dlsApi.DLS_VERB_HIGH)
      else:
         if(verbose == 0):
            iface.setVerbosity(dlsApi.DLS_VERB_NONE)
         else:
            if(verbose == 1):
               iface.setVerbosity(dlsApi.DLS_VERB_WARN)
   except dlsApi.DlsApiError, inst:
      msg = "Error when binding the DLS interface: " + str(inst)
      sys.stderr.write(msg+"\n")
      return -1

      
 # Do the update (under session/transaction)
   try:
     updateEntries(iface, lineList, trans, verbose)
   except dlsApi.DlsApiError, inst:         
      if(inst.rc):  err = inst.rc 
      else:           err = -1
      msg = "Error in the entry(ies) update: %s." % str(inst)
      sys.stderr.write(msg+'\n')


 # Finally, return error code
   return err



######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
