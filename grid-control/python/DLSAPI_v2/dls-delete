#!/usr/bin/env python

#
# $Id: dls-delete,v 1.6 2006/04/25 10:43:41 afanfani Exp $
#
# DLS Client. $Name: DLS_0_1_1 $.
# Antonio Delgado Peris. CIEMAT. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
DLS_VERB_HIGH = dlsApi.DLS_VERB_HIGH
DLS_VERB_WARN = dlsApi.DLS_VERB_WARN
from dlsDataObjects import DlsLocation, DlsFileBlock, DlsEntry
import dlsClient
import os
import sys
import commands
import getopt



######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-delete [-v, -e, -i, -k | -l, -x]    <fileblock> [<SE_1> <SE_2> ..]"
   print "       dls-delete [-v, -e, -i, -k | -l, -x] -a <fileblock>"
   print "       dls-delete [-v, -e, -i, -k | -l, -x] -f <listing_file>"
   print "       dls-delete -u"
   print "       dls-delete -h"

def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -a, --all
   -l, --remove-links  --- NOT YET IMPLEMENTED
   -k, --keepFileBlock
   -x, --force
   -f, --from-file <filename>
   """
def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """Deletes the specified non-custodial locations (located in <SE_1>
<SE_2> ..) for the given <fileblock> FileBlock in the DLS server.

Custodial locations (f_type = "P") are not deleted unless "--force" is specified.

If the "-a" option is specified (no location must then be specified), all the
locations are removed and also the specified FileBlock (or symlink if such
exists) is deleted. If one of the locations is custodial, though, that one cannot
be removed unless "--force" is used, and thus the FileBlock cannot be removed either.

In any case, if the last location associated in the catalog with the specified
FileBlock is deleted, the FileBlock itself is also removed, unless --keepFileBlock
is used.

For DLS implementations with a hierarchical FileBlock namespace, for the "-a"
case, the command will also delete empty directories in the hierarchy.
Non empty directories will refuse to be removed.

For DLS implementations supporting symlinks to FileBlock names, the "-l" option 
can be used to cause the deletion of all the symlinks -- including the main FileBlock
name. THIS ADVANCED OPTION IS NOT YET IMPLEMENTED.

If the "-k" option is given, then only the locations are removed, but not the
FileBlock or symlinks, no matter if the last location is removed.

The "-k' and "-l" options cannot be specified together.

NOTE for LFC-based DLS: If you plan to delete a whole DLS directory (including any
custodial replicas), rather use lfc-del-dir. If you want to delete a sym link but not
any replica, rather use lfc-rm.

The "-f" option can be used to specify fileblocks and SEs in a file rather than in
the arguments. The file must contain one fileblock per line, with the list of the SE
of the replicas to be removed in the same line and separated by whitespaces. In this
case, the "-k", "-l" and "--force" options have the same meaning as before and affects
all fileblocks in <listfile>.

ATTENTION: The "-a" option cannot be specified together with "-f", but if in a line
of <listfile> no replica is specified with the fileblock, then the functionality of
the"-a" option is assumed for that line and all replicas are removed. 

The "-e" option can be used to set the DLS endpoint to use. If not specified,
the endpoint is retrieved from:
    - DLS_ENDPOINT environmental variable
If the DLS endpoint cannot be retrieved in any of these ways, the command fails.
The endpoint should be of the form: "hname[:port][/path/to/DLS]", where a
default port is used if not specified, and the path to DLS may be required for
some DLS implementations (and ignored otherwise).

The "-i" option specifies the type of interface that should be used (which
depends on the DLS backend to access). If not specified, the interface type
is retrieved from:
    - DLS_TYPE environmental variable
If the interface type cannot be retrieved in any of these ways, the command fails.
Currently accepted values are:
    - DLS_TYPE_LFC  =>  DlsLfcApi class (complete API with LFC back-end)
    - DLS_TYPE_DLI  =>  DlsDliClient class (getLocations only API with LFC back-end)
    - DLS_TYPE_MYSQL =>  DlsMySQLApi  class (complete API with MySQL proto back-end) 

The "-v" option sets the verbosity level for the command. Accepted values are:
  -v 0 ==> print nothing else than error messages
  -v 1 ==> print also warning messages (default)
  -v 2 ==> print extra debug information

If "-u" is specified, usage information is displayed.

If "-h" is specified, help information is displayed.
   """
   options()
   usage()


def deleteEntries(iface, lineList, keepFileBlock, removeLinks, force, verbose):
   """
    Tries to delete the specified locations of the specified FileBlocks 
    (or all the locations for those FileBlocks for which there are no 
    locations specified).
    
    lineList is a list of strings. In each string the first element is a
    FileBlock name and the rest (separated by whitespaces) are the
    corresponding locations for that FileBlock.

    The format of a line is then:
    <lfn> [<se1> <se2> ..]
    All elements separated by whitespaces.

    Throws DlsLfcApiError if there is a problem in the DLS operation.
   """

   entryList = []
   fbList = []

   for line in lineList:
      # Split
      line = (line.strip()).split()

      # FileBlock
      lfn = line.pop(0)
      fB = DlsFileBlock(lfn)

      # Build the arguments...
      all = False
      if(not line): all = True
      locList = []
      for loc in line:
         locList.append(DlsLocation(loc))
      entry = DlsEntry(fB, locList)
      
      # And just let the API do everything 
      if(verbose >= 2):
         print "--DlsApi.delete(%s, all=%s, force=%s, keepFileBlock=%s, removeLinks=%s)"\
               % (str(entry), str(all), str(force), str(keepFileBlock), str(removeLinks))
               
      iface.delete(entry, force = force, all = all, keepFileBlock = keepFileBlock,\
                   removeLinks=removeLinks, session = True)


###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 

   longoptions=["help", "usage", "verbose", "endpoint", "interface-type", "all",\
                "remove-links", "keepFileBlock", "force", "from-file"]
   try:
      optlist, args = getopt.getopt(pArgs, 'huv:e:i:alkxf:', longoptions)
   except getopt.GetoptError, inst:
      sys.stderr.write("Bad usage: "+str(inst)+'\n')
      usage()
      sys.exit(-1)

   err=0
   all = False
   removeLinks = False
   keepFileBlock = False
   force = False
   admitted_verb_values = [0, 1, 2]
   verbose = 1
   endpoint = None
   iface_type = None
   admitted_iface_types = ["DLS_TYPE_LFC", "DLS_TYPE_DLI", "DLS_TYPE_MYSQL"]
   fromFile = False
   fname=""

   for opt, val in optlist:
     if opt in ("-h", "--help"):
         help()
         return -1

     elif opt in ("-u", "--usage"):
         usage()
         return -1
         
     elif opt in ("-v", "--verbose"):
         try: 
           val = int(val)
         except ValueError, inst:
           sys.stderr.write("Unsupported verbosity value: " + val + "\n")
           return -1
         if (not (val in admitted_verb_values)):
            sys.stderr.write("Unsupported verbosity value: " + val + "\n")
            return -1             
         verbose = val
         
     elif opt in ("-e","--endpoint"):
         endpoint = val

     elif opt in ("-i", "--interface-type"):
         if (not (val in admitted_iface_types)):
            sys.stderr.write("Unsupported interface type: " + val + "\nSuppported values: %s\n"%admitted_iface_types)
            return -1
         if(val == "DLS_TYPE_LFC"):
            iface_type = dlsClient.DLS_TYPE_LFC
         if(val == "DLS_TYPE_DLI"):
            iface_type = dlsClient.DLS_TYPE_DLI
         if(val == "DLS_TYPE_MYSQL"):
            iface_type = dlsClient.DLS_TYPE_MYSQL

     elif opt in ("-a", "--all"):
         if(fromFile):
            sys.stderr.write("Bad usage: The -a and -f options are incompatible"+'\n')
            usage()
            return -1
         all = True
         
     elif opt in ("-l", "--remove-links"):       
         if(keepFileBlock):
            sys.stderr.write("Bad usage: The -k and -l options are incompatible"+'\n')
            usage()
            return -1
         removeLinks = True
         
     elif opt in ("-k", "--keepFileBlock"):
         if(removeLinks):
            sys.stderr.write("Bad usage: The -k and -l options are incompatible"+'\n')
            usage()
            return -1
         keepFileBlock = True
         
     elif opt in ("-x", "--force"):
         force = True
         
     elif opt in ("-f","--from-file"):
         if(all):
            sys.stderr.write("Bad usage: The -a and -f options are incompatible"+'\n')
            usage()
            return -1
         fromFile = True
         fname = val

#   if(removeLinks):
#       if (not (all or fromFile)):
#          msg = "Bad usage: The -l option can only be specified together with -a or -f"
#          sys.stderr.write(msg + '\n')
#          usage()
#          return -1
 
  
 # Build the arguments 

   # From file
   if(fromFile):
      try:
         file=open(fname, 'r')
      except IOError, inst:
         msg="The file "+fname+" could not be opened: "+str(inst)+"\n"
         sys.stderr.write(msg)
         return -1
      lineList=file.readlines()
      
   # From command line options
   else:
      if(len(args)<1):
         print "Bad usage: Not enough input arguments"
         usage()
         return -1
      if(len(args)<2):
         if(not all):
            print "Bad usage: Not enough input arguments (either -a is used, or a SE is specified)"
            usage()
            return -1
      else:
         if(all):
            sys.stderr.write("Bad usage: The -a option is incompatible with a SE argument"+'\n')
            usage()
            return -1
            
      line = ""
      for token in args:
         line += token + " "
      lineList = [line]


 # Create the interface binding
   try:
      iface = dlsClient.getDlsApi(iface_type, endpoint)
      if(verbose == 2):
         iface.setVerbosity(dlsApi.DLS_VERB_HIGH)
      else:
         if(verbose == 0):
            iface.setVerbosity(dlsApi.DLS_VERB_NONE)
         else:
            if(verbose == 1):
               iface.setVerbosity(dlsApi.DLS_VERB_WARN)
   except dlsApi.DlsApiError, inst:
      msg = "Error when binding the DLS interface: " + str(inst)
      sys.stderr.write(msg+"\n")
      return -1

      
 # Do the deletion (under session)
   try:
     deleteEntries(iface, lineList, keepFileBlock, removeLinks, force, verbose)
   except dlsApi.DlsApiError, inst:         
      if(inst.rc):  err = inst.rc 
      else:           err = -1
      msg = "Error in the entry(ies) deletion: %s." % str(inst)
      sys.stderr.write(msg+'\n')


 # Finally, return error code
   return err



######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
