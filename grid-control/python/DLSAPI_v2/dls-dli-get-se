#!/usr/bin/env python

#
# $Id: dls-dli-get-se,v 1.2 2006/04/21 11:47:11 delgadop Exp $
#
# DLS Client. $Name: DLS_0_1_1 $.
# Antonio Delgado Peris. CIEMAT. CMS.
#

#
# Utility (CLI) for DLS querying (for locations of a given fileBlock).
#
# This tool uses the DlsDliClient interface, which is a reduced (only for
# query) implementation of the DLS client API that uses the DLI as DLS interface.
#

import sys
import dlsDliClient 
from dlsDataObjects import *
import getopt

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-dli-list [-v] [-e <endpoint>] <fileblock>"
   print "       dls-dli-list [-v] [-e <endpoint>] -f <listing_file>"
   print "       dls-dli-list -u"
   print "       dls-dli-list -h"
                                                                                                    
def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose
   -e, --endpoint
   -f, --from-file
   """
                                                                                                    
def help():
   """
    Provides some help information
   """
   print """This script will print the locations for which there is a replica of the specified
fileblock registered. This information is obtained by querying the DLI interface of the DLS.

The "-e" option can be used to set the DLS (DLI) endpoint to use. If not specified,
the endpoint is retrieved by other means (in this order):
    - DLS_ENDPOINT environmental variable
    - DLI_ENDPOINT environmental variable
If the DLS endpoint cannot be retrieved in any of these ways, the command fails. 
The endpoint should be of the form: "hname[:port][/path/to/DLS]", where a
default port is used if not specified, and the path to DLS may be required for
some DLS implementations (and ignored otherwise).

The "-f" option can be used to retrieve fileblock names from a file rather than from the
given arguments. The file must contain one line per fileblock to be listed.
                                                                                                    
If "-u" is specified, usage information is displayed.
                                                                                                    
If "-h" is specified, help information is displayed.
   """
   options()
   usage()



def showSEs(dli_iface, lfnList, verbose):
   """
    Prints the locations which hold a replica of the specified FileBlock(s).
   """
      
   fbList = []
   
   for lfn in lfnList:
      lfn = lfn.strip()
      fB = DlsFileBlock(lfn)
      fbList.append(fB)   

   if(verbose):
      print "--dlsDliClient.getLocations(",
      for i in fbList: print i, ";",
      print ")"

   try:
      res = dli_iface.getLocations(fbList)
      if(res):
         for entry in res:
           if(len(res)>1):
             print "  FileBlock: " + entry.fileBlock.name
           for loc in entry.locations:
              print loc.host
      else:
         return -1

   except dlsDliClient.DlsDliClientError, inst:
      msg = "Error in DLS interaction: " + inst.msg + ". "
      sys.stderr.write(msg +'\n')
      return -1
      
 # Finally, if no error exited before, exit succesfully
   return 0
                                                                                                    



###################### MAIN FUNCTION ########################
                                                                                                    

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """
                                                                                                    
 # Options and args...
                                                                                                    
   longoptions=["help", "usage", "verbose", "endpoint", "from-file"]
   try:
      optlist, args = getopt.getopt(pArgs, 'hutve:f:', longoptions)
   except getopt.GetoptError, inst:
      sys.stderr.write("Bad usage: "+str(inst)+'\n')
      usage()
      sys.exit(-1)
                                                                                                    
   err=0
   verbose = False
   endpoint = None
   fromFile = False
   fname=""
   for opt, val in optlist:
       if opt in ("-h", "--help"):
           help()
           return -1
 
       elif opt in ("-u", "--usage"):
           usage()
           return -1

       elif opt in ("-v", "--verbose"):
           verbose = True

       elif opt in ("-e","--endpoint"):
           endpoint = val

       elif opt in ("-f","--from-file"):
           fromFile = True
           fname = val
                                                                                                    
 # Perform the listing

   # Create the binding
   try:
      api = dlsDliClient.DlsDliClient(endpoint)
   except dlsDliClient.SetupError, inst:
      msg = "The DLS endpoint could not be found! Consider using the -e option.\n"
      sys.stderr.write(msg)
      return -1
   except dlsDliClient.DliClientError, inst:
      msg = "Error in the DLI interface instantiation: " + str(inst) + "\n"
      sys.stderr.write(msg)
      return -1
        

   # From file
   if(fromFile):
      #Open File
      try:
         file=open(fname, 'r')
      except IOError, inst:
         msg="The file "+fname+" could not be opened: "+str(inst)+"\n"
         sys.stderr.write(msg)
         return -1
                                                                                                    
      # Read lines
      lfnList = file.readlines()
                                                                                                    
      # Show loop 
      err = showSEs(api, lfnList, verbose)
                                                                                                    
   # From command line options
   else:
      if(len(args)<1):
        sys.stderr.write("Not enough input arguments"+'\n')
        usage()
        return(-1)

      else:
         lfn = args[0]
         if(verbose):
            print "--LFN: "+lfn
         err = showSEs(api, [lfn], verbose)
         

 # Finally, if no error exited before, exit succesfully
   return err
                                                                                                    


######################### MAKE IT CALLABLE ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))

